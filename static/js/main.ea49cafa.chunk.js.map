{"version":3,"sources":["requests.js","axios.js","Row.js","Banner.js","images/netflix-logo.png","images/smiley-face.svg","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanticMovies","fetchDocumentaries","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","console","log","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","alert","imageClickHandler","src","backdrop_path","poster_path","alt","id","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPostion","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","logo","smiley","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea49cafa.chunk.js","sourcesContent":["const API_KEY = \"4678d1cce557fd387853020033e0e16d\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    // fetchTopRated: `/movies/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanticMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react'\r\nimport axios from './axios';\r\nimport './row.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n// import movieTrailer from '../node_modules/ movie-trailer';\r\nconst baseurl = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            console.log(request.data.results);\r\n\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n        },\r\n    }\r\n    const imageClickHandler = (movie) => {\r\n        // setTrailerUrl(\"8QkyLqmJCMM\");\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n        } else {\r\n            movieTrailer(movie.name || movie.title)\r\n                .then((url) => {\r\n                    // https://www.youtube.com/watch?v=r4WRkiES9LU\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    console.log(\"i am the one who \", urlParams.get(\"v\"))\r\n                    setTrailerUrl(urlParams.get(\"v\"));\r\n                })\r\n                .catch(() => alert(\"movie trailer is not available at this moment!\"));\r\n        }\r\n    };\r\n    // console.log(movies);\r\n    return (\r\n        <div className=\"row\">\r\n            <h2 className=\"row_title\">{title}</h2>\r\n            <div className=\"row_posters\">\r\n                {movies.map(movie =>\r\n                    <img\r\n                        onClick={() => imageClickHandler(movie)}\r\n                        key={movie.id}\r\n                        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                        src={`${baseurl}${isLargeRow ? movie.backdrop_path : movie.poster_path}`}\r\n                        alt={movie.name} />\r\n                )}\r\n            </div>\r\n\r\n            { trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './banner.css';\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(request.data.results[Math.floor(Math.random() * request.data.results.length)]);\r\n        }\r\n        fetchData();\r\n    }, [])\r\n    const truncate = (str, n) => {\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n    };\r\n    return (\r\n        <header className=\"banner\" style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            backgroundPostion: \"center center\"\r\n        }}>\r\n            <div className=\"banner_content\">\r\n                <h1 className=\"banner_title\">{movie?.title || movie?.name || movie?.original_name}</h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner_description\">\r\n                    {truncate(movie?.overview, 150)}\r\n                </h1>\r\n            </div>\r\n            <div className=\"banner_fadebottom\"></div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner;\r\n","export default __webpack_public_path__ + \"static/media/netflix-logo.b39480d0.png\";","export default __webpack_public_path__ + \"static/media/smiley-face.60f3a3fa.svg\";","import React, { useEffect, useState } from 'react'\r\nimport logo from './images/netflix-logo.png';\r\nimport smiley from './images/smiley-face.svg';\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', () => {\r\n            if (window.scrollY > 100) {\r\n                handleShow(true);\r\n            } else { handleShow(false) }\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    }, []);\r\n    return (\r\n        <div className={`navbar ${show && \"navbar_black\"}`}>\r\n            <img className=\"netflix-logo logo\" src={logo} alt=\"Netflix-logo\" />\r\n            <img className=\"smiley logo\" src={smiley} alt=\"smiley-logo\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import './App.css';\nimport requests from './requests';\nimport Row from './Row';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n      <Row title=\"NetFlix Original\" fetchUrl={requests.fetchNetflixOriginals} />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} isLargeRow />\n      {/* <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} /> */}\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanticMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Documentries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}